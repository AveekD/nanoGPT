This is the course description for EECS 280. This is the syllabus for EECS 280. The course is divided into three parts: Programming, Abstraction, and Data Structures.This section describes the following topics: instantiation, recursion, abstract data types, and parameter passing methods. Structured data types, pointers, linked data structures, stacks, queues, arrays, records, and trees.This is a course on generalizable concepts in programming. To understand what a generalizable concept is, let's take a diversion from programming and consider a concept in baking. In this course,The Cake Blog experimented with the number of eggs in a cake recipe, finding that 0 eggs resulted in a short, dense cake that fell apart when cut. 1 egg resulted in a dense, compact cake that held together when cut and had aThe number of eggs in a cake affects its structure and texture. More eggs results in a lighter cake, up to a point. The number of eggs can be varied to produce different structures and textures.This course is about programming in C++, but the goal is to learn programming concepts, not just C++. We will use C++ as our vehicle for learning these concepts, and we will implement several large programming projects to develop our experience andThis describes the execution of a C++ program, which starts at main(). For each variable declared within main(), the value of the variable is stored in some memory location.The basic machine model is a linear array of memory locations, with each location holding a value. The program uses a memory location to store the value of an object. The program uses a memory location to store the value of a local variable. TheThe program initializes x and y, but not z. The location for x has a representation of the int value 3, the location for y has a representation of the double value 4.1, and the location for z has some indetermA name refers to some entity such as a variable, function, or type. A variable is a name that refers to an object in memory. A name has a scope, which determines what region of code can use that name to refer to anThe function definition for main() begins with the declaration of the function. Attempting to use y outside this region will result in a compiler error. A declaration is what introduces a name into the program and begins its scope. At runtime, an objectThe lifetime of an object is determined by its storage duration. There are three options: static, automatic, and dynamic. Static objects have a lifetime that is essentially the whole program. Automatic objects have a lifetime that is tied to a particular scopeA variable is a concept associated with source code, while an object is associated with the runtime. The same variable can refer to different objects at different times, such as a local variable in a function that is called more than once. An object thatThe assignment in the last line copies the value stored in the memory object associated with y into the memory object for x, as shown in Figure 4. The assignment in the last line copies the valueC++ supports reference semantics only when initializing a new variable. Placing an ampersand (&) to the left of the new variable name causes the name to be associated with an existing object. Any subsequent modification to this object is reflectedA reference is another name for an existing object. Since C++ only supports reference semantics in initialization, the association between a variable and a memory object can never be broken, except when the variable goes out of scope.
